<?php
/**
 * Created by PhpStorm.
 * User: Silas
 * Date: 18.03.2016
 * Time: 22:46
 */

namespace Application\Controller;


use Application\Form\AccountSettingsForm;
use Application\Form\ChangePasswordForm;
use Application\Model\Code;
use Application\Model\Manager\CodeManager;
use silas\Interfaces\MySettingsInterface;
use Application\Model\Manager\ResourceManager;
use Application\Model\Manager\UserManager;
use Application\Model\Resource;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Stdlib\RequestInterface as Request;
use Zend\Stdlib\ResponseInterface as Response;
use Zend\View\Model\ViewModel;

class SettingsController extends AbstractActionController
{
    private $useTemplate = true;

    /**
     * @return boolean
     */
    public function isUseTemplate()
    {
        return $this->useTemplate;
    }

    /**
     * @param boolean $useTemplate
     */
    public function setUseTemplate($useTemplate)
    {
        $this->useTemplate = $useTemplate;
    }

    public function indexAction()
    {
		/** @var  $userManager */
        $userManager = $this->getServiceLocator()->get("userManager");
        $user = $userManager->getUserFromSession();

        /** @var CodeManager $codeManager */
        $codeManager = $this->getServiceLocator()->get("codeManager");

        /** @var \Zend\Http\Request $request */
        $request = $this->getRequest();

        if ($user == null) {
            $this->getResponse()->setStatusCode(404);
            $this->getEventManager()->trigger('dispatchError', 'Module', $this->getEvent());
            return;
        }

        $form = new AccountSettingsForm($userManager, $this->flashMessenger());
        $form->bind($user);
        if ($request->isPost())
        {
            $form->setData($request->getPost());
            if ($form->isValid())
            {
                $newEmail = $request->getPost("newEmailAddress");
                if ($codeManager->newEmailCodeHasEmailChanged($user, $newEmail))
                {
                    $code = $codeManager->newChangeEmailCode($user);
                    if (trim($newEmail) == "")
                    {
                        $codeManager->remove($code);
                    }
                    else {
                        $code->setWert($newEmail);
                        $codeManager->sendEmail($user, $code);
                        $this->flashMessenger()->addSuccessMessage("Eine Email wurde an deine neue Adresse gesendet. Bitte klick auf den Link, um deine neue Emailadresse zu bestätigen.");
                    }
                }
                $userManager->save($user);
                $this->flashMessenger()->addSuccessMessage("Die Daten wurden erfolgreich gespeichert.");
                return $this->redirect()->toRoute("settings");
            }
        }

        return new ViewModel(array("form" => $form));
    }

    public function changePasswordSettingsAction()
    {
        /** @var UserManager $userManager */
        $userManager = $this->getServiceLocator()->get("userManager");
        $user = $userManager->getUserFromSession();

        /** @var CodeManager $codeManager */
        $codeManager = $this->getServiceLocator()->get("codeManager");

        /** @var \Zend\Http\Request $request */
        $request = $this->getRequest();

        if ($user == null) {
            $this->getResponse()->setStatusCode(404);
            $this->getEventManager()->trigger('dispatchError', 'Module', $this->getEvent());
            return;
        }

        $form = new ChangePasswordForm($userManager, $this->flashMessenger());
        $form->bind($user);
        if ($request->isPost())
        {
            $form->setData($request->getPost());
            if ($form->isValid())
            {
                $userManager->save($user);
                $this->flashMessenger()->addSuccessMessage("Das Passwort wurde erfolgreich geändert");
                return $this->redirect()->toRoute("settings/changePassword");
            }
            else
            {
                $form->setData(array(
                    "oldPassword" => "",
                    "newPassword1" => "",
                    "newPassword2" => "",
                ));
            }
        }
        return new ViewModel(array("form" => $form));
    }

    public function dispatch(Request $request, Response $response = null)
    {
        $result = parent::dispatch($request, $response); // TODO: Change the autogenerated stub
        if ($result instanceof ViewModel && $this->useTemplate)
        {
            $parent = $this->buildSettingLinks();
            $parent->setTemplate("layout/settingsLayout");
            $parent->addChild($result, "settingsContent");
            $event = $this->getEvent();
            $event->getViewModel()->clearChildren();
            $event->getViewModel()->addChild($parent);
            return $parent;
        }
        return $result;
    }

    private function buildSettingLinks()
    {
        /** @var UserManager $userManager */
        $userManager = $this->getServiceLocator()->get('userManager');
        $user = $userManager->getUserFromSession();

        /** @var ResourceManager $resourceManager */
        $resourceManager = $this->getServiceLocator()->get("resourceManager");

        $settings = array();
        $config = $this->serviceLocator->get("applicationConfig");
        foreach ($config['modules'] as $moduleName) {
            $className = $moduleName . '\Module';
            $class = new $className;
            if ($class instanceof MySettingsInterface) {
                $settings = array_merge_recursive($settings, $class->getSettings());
            }
        }

        $allowedSettings = array();
        foreach ($settings as $setting) {
            $this->validateSetting($setting);

            $resource = $resourceManager->getEntityByName($setting["resource"]);
            if (!($resource instanceof Resource)) {
                throw new \ErrorException("Resource was not found");
            }

            if ($userManager->hasResource($resource, $user) != 0) {
                $allowedSettings[] = $setting;
            }
        }

        if (count($allowedSettings) <= 0) {
            $this->getResponse()->setStatusCode(404);
            $this->getEventManager()->trigger('dispatchError', 'Module', $this->getEvent());
            return;
        }

        usort($allowedSettings, function ($a, $b) {
            $orderA = (isset($a["order"]) && is_int($a["order"])) ? intval($a["order"]) : 0;
            $orderB = (isset($b["order"]) && is_int($b["order"])) ? intval($b["order"]) : 0;

            if ($orderA == $orderB) {
                return 0;
            } else if ($orderA < $orderB) {
                return -1;
            } else {
                return 1;
            }
        });

        return new ViewModel(
            array(
                'settings' => $allowedSettings,
            )
        );
    }

    private function validateSetting($setting)
    {
        if (!isset($setting["label"])) {
            throw new \ErrorException("Setting must have a label");
        }
        if (!isset($setting["route"])) {
            throw new \ErrorException("Setting must have a route");
        }
        if (!isset($setting["resource"])) {
            throw new \ErrorException("Setting must have a resource");
        }
    }
} 